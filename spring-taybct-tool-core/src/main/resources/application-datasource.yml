#在同一个方法中切换数据源
#DynamicDataSourceContextHolder.push("slave");//slave即数据源名称
#//中间执行你的业务sql
#DynamicDataSourceContextHolder.clear();
spring:
  datasource:
    driver-class-name: org.postgresql.Driver
    # 如果 druid 用不了，就注释掉
    type: com.alibaba.druid.pool.DruidDataSource
    dynamic:
      # primary: pgsql-db #设置默认的数据源或者数据源组,默认值即为 master
      # strict: false #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候会抛出异常,不启动则使用默认数据源. &dummyparam=
      primary: pgsql-db
      #开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭,默认是开启的
      seata: false
      datasource:
        pgsql-db:
          url: ENC(XwAqJIikzv7skhGERHPz3sNkdUvo5AysJIaImaLkrhpsndNS7GgUj3w1SjkgJ1Yf7i3nRDWFAtg6kU16XCHkFA==)
          username: ENC(XUNbOuonYmZZuY1iXAk2ZA==)
          password: ENC(Bmss8PxnMQbBEGqD7ybt5Q==)
          driver-class-name: ENC(7ycR/SFztJ2drREmOd8GYo427mcuqdNnH3MXXNtY6vI=)
        # mysql-db:
        #   url: jdbc:mysql://127.0.0.1:3306/taybct?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8
        #   username: root
        #   password: password
        #   driver-class-name: com.mysql.cj.jdbc.Driver
        # oracle-db:
        #   url: jdbc:oracle:thin:@127.0.0.1:1521:ORCL
        #   username: TAYBCT
        #   password: password
        #   driver-class-name: oracle.jdbc.driver.OracleDriver
    # 如果 指定 hikari 数据库连接池
    #type: com.zaxxer.hikari.HikariDataSource
    hikari:
      # 最大连接数
      maximum-pool-size: 10
      # 最小空闲数
      minimum-idle: 5
      # 获取连接超时时间； 默认30s
      connection-timeout: 20000
      # 连接池名称
      pool-name: pool-hikari
      # 空闲超时时间；默认是十分钟；空闲时间超过设定时间则会被回收
      idle-timeout: 600000
      # 是否自动提交
      auto-commit: true
      # 最大存活时间，默认30分钟
      max-lifetime: 1800000
      # connection-test-query: SELECT 1  # 连接数据库后测试语句
      validation-timeout: 1000
      # 设置模式，例如 postgresql 有模式这个概念
      # schema:
    druid:
      # druid 监控页面入口控制
      stat-view-servlet:
        enabled: true
        # ip黑名单，禁止访问的地址 优先级高于白名单
        #deny: x.x.x.x
        # druid 监控页面登录账号
        login-username: druid
        # druid 监控页面登录密码
        login-password: 123654
        # 监控页面访问路径配置
        url-pattern: /druid/*
        # 是否能够重置数据
        reset-enable: true
        #IP白名单 没有配置或者为空 则允许所有访问 只有当前名单中的ip才能访问 1/27表示ip前27位相同即可
        #allow: 10.18.80.0/24
        #IP黑名单 若白名单也存在 则优先使用
        #deny:
      #初始化时建立物理连接的个数
      initial-size: 10
      # 连接池最小空闲数
      min-idle: 10
      # 最大连接池数量
      max-active: 100
      # 连接时最大等待时间（单位：毫秒）
      max-wait: 60000
      # 1.2.12 新增属性 执行超时时间，默认是 10 秒，执行语句超过 10秒就会报错
      connect-timeout: 20000
      # 同上
      socket-timeout: 20000
      # 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行 validationQuery 检测连接是否有效。
      test-while-idle: true
      # 既作为检测的间隔时间又作为 test-while-idle 执行的依据
      time-between-eviction-runs-millis: 20000
      # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
      min-evictable-idle-time-millis: 30000
      # 用来检测连接是否有效的sql
      # mysql中为 select 'x'
      # oracle中为 select 1 from dual
      validation-query: SELECT 'x'
      # 检测连接是否有效的超时时间
      validation-query-timeout: 1
      # 申请连接时会执行 validationQuery 检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行 validationQuery 检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      # 当数据库抛出不可恢复的异常时,抛弃该连接
      exception-sorter: true
      # 是否开启PSCache，即是否缓存preparedStatement（提升写入、查询效率）
      # 是否缓存 preparedStatement,mysql5.5+建议开启 建议在支持游标的数据库开启，例如：Oracle
      pool-prepared-statements: true
      # 每个连接上PSCache的最大值
      # 如果大于0，pool-prepared-statements自动开启
      max-pool-prepared-statement-per-connection-size: 20
      #通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个 DruidDataSource 的监控数据
      use-global-data-source-stat: true
      #filters通过别名的方式配置扩展插件，常用的插件有：
      #监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall
      filters: stat,wall,slf4j
      filter:
        config:
          # 开启密钥加密
          enabled: true
        # SQL监控配置
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: false
        # SQL防火墙配置
        wall:
          config:
            multi-statement-allow: true
      # web应用 监控配置
      web-stat-filter:
        # 配置统计页面过滤
        enabled: true
        # 能够监控单个url调用的sql列表
        profile-enable: true
        # 监控路径控制
        url-pattern: /*
        # 不拦截的路径
        exclusions: '.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*'
        # 开启session统计
        session-stat-enable: true
        # session统计的最大个数
        session-stat-max-count: 100
        # Spring 监控路径
      aop-patterns: io.github.taybct.*.service.*